/* ========================================================================
 * Copyright 2014 astroDevelopers
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 astroDevelopers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410261249

*/

package co.edu.uniandes.csw.astroDevelopers.proyecto.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.astroDevelopers.proyecto.logic.dto.ProyectoDTO;
import co.edu.uniandes.csw.astroDevelopers.proyecto.logic.api.IProyectoLogicService;
import co.edu.uniandes.csw.astroDevelopers.proyecto.persistence.ProyectoPersistence;
import co.edu.uniandes.csw.astroDevelopers.proyecto.persistence.api.IProyectoPersistence;
import co.edu.uniandes.csw.astroDevelopers.proyecto.persistence.entity.ProyectoEntity;
import co.edu.uniandes.csw.astroDevelopers.proyecto.persistence.converter.ProyectoConverter;
import static co.edu.uniandes.csw.astroDevelopers.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ProyectoLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ProyectoLogicService.class.getPackage())
				.addPackage(IProyectoLogicService.class.getPackage())
				.addPackage(ProyectoPersistence.class.getPackage())
				.addPackage(ProyectoEntity.class.getPackage())
				.addPackage(IProyectoPersistence.class.getPackage())
                .addPackage(ProyectoDTO.class.getPackage())
                .addPackage(ProyectoConverter.class.getPackage())
                .addPackage(ProyectoEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IProyectoLogicService proyectoLogicService;
	
	@Inject
	private IProyectoPersistence proyectoPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ProyectoDTO> dtos=proyectoPersistence.getProyectos();
		for(ProyectoDTO dto:dtos){
			proyectoPersistence.deleteProyecto(dto.getId());
		}
	}

	private List<ProyectoDTO> data=new ArrayList<ProyectoDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ProyectoDTO pdto=new ProyectoDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setTema(generateRandom(String.class));
			pdto.setDescripcion(generateRandom(String.class));
			pdto.setEstado(generateRandom(Integer.class));
			pdto.setImagen(generateRandom(String.class));
			pdto.setDemo(generateRandom(String.class));
			pdto.setLema(generateRandom(String.class));
			pdto.setEquipo_proyectoId(generateRandom(Long.class));
			pdto=proyectoPersistence.createProyecto(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createProyectoTest(){
		ProyectoDTO ldto=new ProyectoDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setTema(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setEstado(generateRandom(Integer.class));
		ldto.setImagen(generateRandom(String.class));
		ldto.setDemo(generateRandom(String.class));
		ldto.setLema(generateRandom(String.class));
		ldto.setEquipo_proyectoId(generateRandom(Long.class));
		
		
		ProyectoDTO result=proyectoLogicService.createProyecto(ldto);
		
		Assert.assertNotNull(result);
		
		ProyectoDTO pdto=proyectoPersistence.getProyecto(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getTema(), pdto.getTema());	
		Assert.assertEquals(ldto.getDescripcion(), pdto.getDescripcion());	
		Assert.assertEquals(ldto.getEstado(), pdto.getEstado());	
		Assert.assertEquals(ldto.getImagen(), pdto.getImagen());	
		Assert.assertEquals(ldto.getDemo(), pdto.getDemo());	
		Assert.assertEquals(ldto.getLema(), pdto.getLema());	
		Assert.assertEquals(ldto.getEquipo_proyectoId(), pdto.getEquipo_proyectoId());	
	}
	
	@Test
	public void getProyectosTest(){
		List<ProyectoDTO> list=proyectoLogicService.getProyectos();
		Assert.assertEquals(list.size(), data.size());
        for(ProyectoDTO ldto:list){
        	boolean found=false;
            for(ProyectoDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getProyectoTest(){
		ProyectoDTO pdto=data.get(0);
		ProyectoDTO ldto=proyectoLogicService.getProyecto(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getTema(), ldto.getTema());
		Assert.assertEquals(pdto.getDescripcion(), ldto.getDescripcion());
		Assert.assertEquals(pdto.getEstado(), ldto.getEstado());
		Assert.assertEquals(pdto.getImagen(), ldto.getImagen());
		Assert.assertEquals(pdto.getDemo(), ldto.getDemo());
		Assert.assertEquals(pdto.getLema(), ldto.getLema());
		Assert.assertEquals(pdto.getEquipo_proyectoId(), ldto.getEquipo_proyectoId());
        
	}
	
	@Test
	public void deleteProyectoTest(){
		ProyectoDTO pdto=data.get(0);
		proyectoLogicService.deleteProyecto(pdto.getId());
        ProyectoDTO deleted=proyectoPersistence.getProyecto(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateProyectoTest(){
		ProyectoDTO pdto=data.get(0);
		
		ProyectoDTO ldto=new ProyectoDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setTema(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setEstado(generateRandom(Integer.class));
		ldto.setImagen(generateRandom(String.class));
		ldto.setDemo(generateRandom(String.class));
		ldto.setLema(generateRandom(String.class));
		ldto.setEquipo_proyectoId(generateRandom(Long.class));
		
		
		proyectoLogicService.updateProyecto(ldto);
		
		
		ProyectoDTO resp=proyectoPersistence.getProyecto(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getTema(), resp.getTema());	
		Assert.assertEquals(ldto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(ldto.getEstado(), resp.getEstado());	
		Assert.assertEquals(ldto.getImagen(), resp.getImagen());	
		Assert.assertEquals(ldto.getDemo(), resp.getDemo());	
		Assert.assertEquals(ldto.getLema(), resp.getLema());	
		Assert.assertEquals(ldto.getEquipo_proyectoId(), resp.getEquipo_proyectoId());	
	}
	
	
	
	
}