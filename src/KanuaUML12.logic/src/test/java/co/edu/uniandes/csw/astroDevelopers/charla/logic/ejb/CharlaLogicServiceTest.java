/* ========================================================================
 * Copyright 2014 astroDevelopers
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 astroDevelopers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410261249

*/

package co.edu.uniandes.csw.astroDevelopers.charla.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.astroDevelopers.charla.logic.dto.CharlaDTO;
import co.edu.uniandes.csw.astroDevelopers.charla.logic.api.ICharlaLogicService;
import co.edu.uniandes.csw.astroDevelopers.charla.master.logic.api.ICharlaMasterLogicService;
import co.edu.uniandes.csw.astroDevelopers.charla.master.persistence.api.ICharlaMasterPersistence;
import co.edu.uniandes.csw.astroDevelopers.charla.master.persistence.CharlaMasterPersistence;
import co.edu.uniandes.csw.astroDevelopers.charla.master.logic.ejb.CharlaMasterLogicService;
import co.edu.uniandes.csw.astroDevelopers.charla.master.logic.dto.CharlaMasterDTO;
import co.edu.uniandes.csw.astroDevelopers.charla.persistence.CharlaPersistence;
import co.edu.uniandes.csw.astroDevelopers.charla.persistence.api.ICharlaPersistence;
import co.edu.uniandes.csw.astroDevelopers.charla.persistence.entity.CharlaEntity;
import co.edu.uniandes.csw.astroDevelopers.charla.persistence.converter.CharlaConverter;
import co.edu.uniandes.csw.astroDevelopers.tag.logic.api.ITagLogicService;
import co.edu.uniandes.csw.astroDevelopers.tag.persistence.TagPersistence;
import co.edu.uniandes.csw.astroDevelopers.tag.persistence.api.ITagPersistence;
import co.edu.uniandes.csw.astroDevelopers.tag.persistence.entity.TagEntity;
import co.edu.uniandes.csw.astroDevelopers.tag.persistence.converter.TagConverter;
import co.edu.uniandes.csw.astroDevelopers.tag.logic.dto.TagDTO;
import co.edu.uniandes.csw.astroDevelopers.tag.logic.ejb.TagLogicService;
import co.edu.uniandes.csw.astroDevelopers.charla.master.persistence.entity.Charlatag_charlaEntity;
import static co.edu.uniandes.csw.astroDevelopers.util._TestUtil.*;

@RunWith(Arquillian.class)
public class CharlaLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(CharlaLogicService.class.getPackage())
				.addPackage(ICharlaLogicService.class.getPackage())
				.addPackage(CharlaPersistence.class.getPackage())
				.addPackage(CharlaEntity.class.getPackage())
				.addPackage(ICharlaPersistence.class.getPackage())
                                .addPackage(ICharlaMasterLogicService.class.getPackage())
                                .addPackage(ICharlaMasterPersistence.class.getPackage())
                                .addPackage(CharlaMasterPersistence.class.getPackage())
                                .addPackage(CharlaMasterLogicService.class.getPackage())
                                .addPackage(TagLogicService.class.getPackage())
				.addPackage(ITagLogicService.class.getPackage())
				.addPackage(TagPersistence.class.getPackage())
				.addPackage(TagEntity.class.getPackage())
				.addPackage(ITagPersistence.class.getPackage())
                .addPackage(TagDTO.class.getPackage())
                .addPackage(Charlatag_charlaEntity.class.getPackage())
                .addPackage(TagConverter.class.getPackage())
                .addPackage(TagEntity.class.getPackage())
                .addPackage(CharlaDTO.class.getPackage())
                .addPackage(CharlaMasterDTO.class.getPackage())  
                .addPackage(TagDTO.class.getPackage())
                .addPackage(CharlaConverter.class.getPackage())
                .addPackage(CharlaEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private ICharlaLogicService charlaLogicService;
	
	@Inject
	private ICharlaPersistence charlaPersistence;	
        
        	@Inject
	private ITagLogicService tagLogicService;
        
        @PersistenceContext
	private EntityManager em;
        
        @Inject
	private ICharlaMasterPersistence charlaMasterPersistence;
        
        @Inject
        protected ICharlaMasterLogicService charlaMasterLogicService;

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<CharlaDTO> dtos=charlaPersistence.getCharlas();
		for(CharlaDTO dto:dtos){
			charlaPersistence.deleteCharla(dto.getId());
		}
	}

	private List<CharlaDTO> data=new ArrayList<CharlaDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			CharlaDTO pdto=new CharlaDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setTitulo(generateRandom(String.class));
			pdto.setInformacion(generateRandom(String.class));
			pdto.setLink(generateRandom(String.class));
			pdto.setFechaEvento(generateRandomDate());
			pdto.setImagen(generateRandom(String.class));
			pdto.setPublicacion(generateRandomDate());
			pdto=charlaPersistence.createCharla(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createCharlaTest(){
		CharlaDTO ldto=new CharlaDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setTitulo(generateRandom(String.class));
		ldto.setInformacion(generateRandom(String.class));
		ldto.setLink(generateRandom(String.class));
		ldto.setFechaEvento(generateRandomDate());
		ldto.setImagen(generateRandom(String.class));
		ldto.setPublicacion(generateRandomDate());
		
		
		CharlaDTO result=charlaLogicService.createCharla(ldto);
		
		Assert.assertNotNull(result);
		
		CharlaDTO pdto=charlaPersistence.getCharla(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getTitulo(), pdto.getTitulo());	
		Assert.assertEquals(ldto.getInformacion(), pdto.getInformacion());	
		Assert.assertEquals(ldto.getLink(), pdto.getLink());	
		Assert.assertEquals(ldto.getFechaEvento(), pdto.getFechaEvento());	
		Assert.assertEquals(ldto.getImagen(), pdto.getImagen());	
		Assert.assertEquals(ldto.getPublicacion(), pdto.getPublicacion());	
	}
	
        @Test
	public void buscarCharlaTest(){
            
            CharlaDTO ldto=new CharlaDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setTitulo(generateRandom(String.class));
		ldto.setInformacion(generateRandom(String.class));
		ldto.setLink(generateRandom(String.class));
		ldto.setFechaEvento(generateRandomDate());
		ldto.setImagen(generateRandom(String.class));
		ldto.setPublicacion(generateRandomDate());
		CharlaDTO result=charlaLogicService.createCharla(ldto);
                
		TagDTO tag1=new TagDTO();
                tag1.setName("clau");
                TagDTO resultag=tagLogicService.createTag(tag1);
                
		Assert.assertNotNull(result);
                Assert.assertNotNull(resultag);
                
		String resultado1=charlaMasterLogicService.buscarCharlaPorTag("holaholaholahola");
                Assert.assertEquals("",resultado1);
                Charlatag_charlaEntity chtag=new Charlatag_charlaEntity(result.getId(),resultag.getId());
                System.out.println("000***********************************  ");
                charlaMasterPersistence.createCharlatag_charlaEntity(chtag);
		System.out.println("111***********************************  "+chtag.getCharlaId());
                
                String resultado=charlaMasterLogicService.buscarCharlaPorTag("clau");
               // Assert.assertEquals("",resultado);
                System.out.println("222***********************************  "+resultado);
                Assert.assertEquals(resultado, chtag.getCharlaId()+"");
                
        
        
	}
        
	@Test
        public void buscarCharlaForTest(){
            for(int i=0; i<20; i++)
            {
                CharlaDTO ldto=new CharlaDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setTitulo(generateRandom(String.class));
		ldto.setInformacion(generateRandom(String.class));
		ldto.setLink(generateRandom(String.class));
		ldto.setFechaEvento(generateRandomDate());
		ldto.setImagen(generateRandom(String.class));
		ldto.setPublicacion(generateRandomDate());
		CharlaDTO result=charlaLogicService.createCharla(ldto);
                
		TagDTO tag1=new TagDTO();
                tag1.setName("clau"+i);
                TagDTO resultag=tagLogicService.createTag(tag1);
                
		Assert.assertNotNull(result);
                Assert.assertNotNull(resultag);
                
		String resultado1=charlaMasterLogicService.buscarCharlaPorTag("holaholaholahola"+i);
                Assert.assertEquals("",resultado1);
                Charlatag_charlaEntity chtag=new Charlatag_charlaEntity(result.getId(),resultag.getId());
                System.out.println("000***********************************  ");
                charlaMasterPersistence.createCharlatag_charlaEntity(chtag);
		System.out.println("111***********************************  "+chtag.getCharlaId());
                
                String resultado=charlaMasterLogicService.buscarCharlaPorTag("clau"+i);
               // Assert.assertEquals("",resultado);
                System.out.println("222***********************************  "+resultado);
                Assert.assertEquals(resultado, chtag.getCharlaId()+"");
            }
        }
        
        @Test
        public void buscarCharlasTest(){
            
                CharlaDTO ldto=new CharlaDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setTitulo(generateRandom(String.class));
		ldto.setInformacion(generateRandom(String.class));
		ldto.setLink(generateRandom(String.class));
		ldto.setFechaEvento(generateRandomDate());
		ldto.setImagen(generateRandom(String.class));
		ldto.setPublicacion(generateRandomDate());
                CharlaDTO ldto2=new CharlaDTO();
		ldto2.setName(generateRandom(String.class));
		ldto2.setTitulo(generateRandom(String.class));
		ldto2.setInformacion(generateRandom(String.class));
		ldto2.setLink(generateRandom(String.class));
		ldto2.setFechaEvento(generateRandomDate());
		ldto2.setImagen(generateRandom(String.class));
		ldto2.setPublicacion(generateRandomDate());
		CharlaDTO result1=charlaLogicService.createCharla(ldto);
                CharlaDTO result2=charlaLogicService.createCharla(ldto2);
            
		TagDTO tag1=new TagDTO();
                TagDTO tag2=new TagDTO();
                
                tag1.setName("clau");
                tag2.setName("dani");
                TagDTO resultag1=tagLogicService.createTag(tag1);
                TagDTO resultag2=tagLogicService.createTag(tag2);
		Assert.assertNotNull(result1);
                Assert.assertNotNull(result2);
                Assert.assertNotNull(resultag1);
                Assert.assertNotNull(resultag2);
            
		String resultado1=charlaMasterLogicService.buscarCharlaPorTag("holahola");
                Assert.assertEquals("",resultado1);
                Charlatag_charlaEntity chtag1=new Charlatag_charlaEntity(result1.getId(),resultag1.getId());
                Charlatag_charlaEntity chtag2=new Charlatag_charlaEntity(result2.getId(),resultag2.getId());
                System.out.println("000***********************************  ");
                charlaMasterPersistence.createCharlatag_charlaEntity(chtag1);
                charlaMasterPersistence.createCharlatag_charlaEntity(chtag2);
                
                String resultado=charlaMasterLogicService.buscarCharlaPorTag("clau;dani");
               // Assert.assertEquals("",resultado);
                System.out.println("222***********************************  "+resultado);
                
            
            
        }
        
	@Test
	public void getCharlasTest(){
		List<CharlaDTO> list=charlaLogicService.getCharlas();
		Assert.assertEquals(list.size(), data.size());
        for(CharlaDTO ldto:list){
        	boolean found=false;
            for(CharlaDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getCharlaTest(){
		CharlaDTO pdto=data.get(0);
		CharlaDTO ldto=charlaLogicService.getCharla(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getTitulo(), ldto.getTitulo());
		Assert.assertEquals(pdto.getInformacion(), ldto.getInformacion());
		Assert.assertEquals(pdto.getLink(), ldto.getLink());
		Assert.assertEquals(pdto.getFechaEvento(), ldto.getFechaEvento());
		Assert.assertEquals(pdto.getImagen(), ldto.getImagen());
		Assert.assertEquals(pdto.getPublicacion(), ldto.getPublicacion());
        
	}
	
	@Test
	public void deleteCharlaTest(){
		CharlaDTO pdto=data.get(0);
		charlaLogicService.deleteCharla(pdto.getId());
        CharlaDTO deleted=charlaPersistence.getCharla(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateCharlaTest(){
		CharlaDTO pdto=data.get(0);
		
		CharlaDTO ldto=new CharlaDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setTitulo(generateRandom(String.class));
		ldto.setInformacion(generateRandom(String.class));
		ldto.setLink(generateRandom(String.class));
		ldto.setFechaEvento(generateRandomDate());
		ldto.setImagen(generateRandom(String.class));
		ldto.setPublicacion(generateRandomDate());
		
		
		charlaLogicService.updateCharla(ldto);
		
		
		CharlaDTO resp=charlaPersistence.getCharla(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getTitulo(), resp.getTitulo());	
		Assert.assertEquals(ldto.getInformacion(), resp.getInformacion());	
		Assert.assertEquals(ldto.getLink(), resp.getLink());	
		Assert.assertEquals(ldto.getFechaEvento(), resp.getFechaEvento());	
		Assert.assertEquals(ldto.getImagen(), resp.getImagen());	
		Assert.assertEquals(ldto.getPublicacion(), resp.getPublicacion());	
	}
	
	
	
	
}