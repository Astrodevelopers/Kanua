/* ========================================================================
 * Copyright 2014 astroDevelopers
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 astroDevelopers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.astroDevelopers.proyecto.master.logic.ejb;

import co.edu.uniandes.csw.astroDevelopers.tag.logic.dto.TagDTO;
import co.edu.uniandes.csw.astroDevelopers.tag.persistence.api.ITagPersistence;
import co.edu.uniandes.csw.astroDevelopers.objetivo.logic.dto.ObjetivoDTO;
import co.edu.uniandes.csw.astroDevelopers.objetivo.persistence.api.IObjetivoPersistence;
import co.edu.uniandes.csw.astroDevelopers.proyecto.logic.dto.ProyectoDTO;
import co.edu.uniandes.csw.astroDevelopers.proyecto.master.logic.api._IProyectoMasterLogicService;
import co.edu.uniandes.csw.astroDevelopers.proyecto.master.logic.dto.ProyectoMasterDTO;
import co.edu.uniandes.csw.astroDevelopers.proyecto.master.persistence.api.IProyectoMasterPersistence;
import co.edu.uniandes.csw.astroDevelopers.proyecto.master.persistence.entity.Proyectotag_proyectoEntity;
import co.edu.uniandes.csw.astroDevelopers.proyecto.master.persistence.entity.Proyectoobjetivo_proyectoEntity;
import co.edu.uniandes.csw.astroDevelopers.proyecto.persistence.api.IProyectoPersistence;
import javax.inject.Inject;

public abstract class _ProyectoMasterLogicService implements _IProyectoMasterLogicService {

    @Inject
    protected IProyectoPersistence proyectoPersistance;
    @Inject
    protected IProyectoMasterPersistence proyectoMasterPersistance;
    @Inject
    protected ITagPersistence tagPersistance;
    @Inject
    protected IObjetivoPersistence objetivoPersistance;

    public ProyectoMasterDTO createMasterProyecto(ProyectoMasterDTO proyecto) {
        ProyectoDTO persistedProyectoDTO = proyectoPersistance.createProyecto(proyecto.getProyectoEntity());
        if (proyecto.getCreatetag_proyecto() != null) {
            for (TagDTO tagDTO : proyecto.getCreatetag_proyecto()) {
                TagDTO createdTagDTO = tagPersistance.createTag(tagDTO);
                Proyectotag_proyectoEntity proyectoTagEntity = new Proyectotag_proyectoEntity(persistedProyectoDTO.getId(), createdTagDTO.getId());
                proyectoMasterPersistance.createProyectotag_proyectoEntity(proyectoTagEntity);
            }
        }
        if (proyecto.getCreateobjetivo_proyecto() != null) {
            for (ObjetivoDTO objetivoDTO : proyecto.getCreateobjetivo_proyecto()) {
                ObjetivoDTO createdObjetivoDTO = objetivoPersistance.createObjetivo(objetivoDTO);
                Proyectoobjetivo_proyectoEntity proyectoObjetivoEntity = new Proyectoobjetivo_proyectoEntity(persistedProyectoDTO.getId(), createdObjetivoDTO.getId());
                proyectoMasterPersistance.createProyectoobjetivo_proyectoEntity(proyectoObjetivoEntity);
            }
        }
        // update tag
        if (proyecto.getUpdatetag_proyecto() != null) {
            for (TagDTO tagDTO : proyecto.getUpdatetag_proyecto()) {
                tagPersistance.updateTag(tagDTO);
                Proyectotag_proyectoEntity proyectoTagEntity = new Proyectotag_proyectoEntity(persistedProyectoDTO.getId(), tagDTO.getId());
                proyectoMasterPersistance.createProyectotag_proyectoEntity(proyectoTagEntity);
            }
        }
        // update objetivo
        if (proyecto.getUpdateobjetivo_proyecto() != null) {
            for (ObjetivoDTO objetivoDTO : proyecto.getUpdateobjetivo_proyecto()) {
                objetivoPersistance.updateObjetivo(objetivoDTO);
                Proyectoobjetivo_proyectoEntity proyectoObjetivoEntity = new Proyectoobjetivo_proyectoEntity(persistedProyectoDTO.getId(), objetivoDTO.getId());
                proyectoMasterPersistance.createProyectoobjetivo_proyectoEntity(proyectoObjetivoEntity);
            }
        }
        return proyecto;
    }

    public ProyectoMasterDTO getMasterProyecto(Long id) {
        return proyectoMasterPersistance.getProyecto(id);
    }

    public void deleteMasterProyecto(Long id) {
        proyectoPersistance.deleteProyecto(id);
    }

    public void updateMasterProyecto(ProyectoMasterDTO proyecto) {
        proyectoPersistance.updateProyecto(proyecto.getProyectoEntity());

        //---- FOR RELATIONSHIP
        // persist new tag
        if (proyecto.getCreatetag_proyecto() != null) {
            for (TagDTO tagDTO : proyecto.getCreatetag_proyecto()) {
                TagDTO createdTagDTO = tagPersistance.createTag(tagDTO);
                Proyectotag_proyectoEntity proyectoTagEntity = new Proyectotag_proyectoEntity(proyecto.getProyectoEntity().getId(), createdTagDTO.getId());
                proyectoMasterPersistance.createProyectotag_proyectoEntity(proyectoTagEntity);
            }
        }
        // update tag
        if (proyecto.getUpdatetag_proyecto() != null) {
            for (TagDTO tagDTO : proyecto.getUpdatetag_proyecto()) {
                tagPersistance.updateTag(tagDTO);
            }
        }
        // delete tag
        if (proyecto.getDeletetag_proyecto() != null) {
            for (TagDTO tagDTO : proyecto.getDeletetag_proyecto()) {
                proyectoMasterPersistance.deleteProyectotag_proyectoEntity(proyecto.getProyectoEntity().getId(), tagDTO.getId());
                tagPersistance.deleteTag(tagDTO.getId());
            }
        }
        // persist new objetivo
        if (proyecto.getCreateobjetivo_proyecto() != null) {
            for (ObjetivoDTO objetivoDTO : proyecto.getCreateobjetivo_proyecto()) {
                ObjetivoDTO createdObjetivoDTO = objetivoPersistance.createObjetivo(objetivoDTO);
                Proyectoobjetivo_proyectoEntity proyectoObjetivoEntity = new Proyectoobjetivo_proyectoEntity(proyecto.getProyectoEntity().getId(), createdObjetivoDTO.getId());
                proyectoMasterPersistance.createProyectoobjetivo_proyectoEntity(proyectoObjetivoEntity);
            }
        }
        // update objetivo
        if (proyecto.getUpdateobjetivo_proyecto() != null) {
            for (ObjetivoDTO objetivoDTO : proyecto.getUpdateobjetivo_proyecto()) {
                objetivoPersistance.updateObjetivo(objetivoDTO);
            }
        }
        // delete objetivo
        if (proyecto.getDeleteobjetivo_proyecto() != null) {
            for (ObjetivoDTO objetivoDTO : proyecto.getDeleteobjetivo_proyecto()) {
                proyectoMasterPersistance.deleteProyectoobjetivo_proyectoEntity(proyecto.getProyectoEntity().getId(), objetivoDTO.getId());
                objetivoPersistance.deleteObjetivo(objetivoDTO.getId());
            }
        }
    }
}
