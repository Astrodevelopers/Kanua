/* ========================================================================
 * Copyright 2014 astroDevelopers
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 astroDevelopers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.astroDevelopers.equipo.master.logic.ejb;

import co.edu.uniandes.csw.astroDevelopers.solicitud.logic.dto.SolicitudDTO;
import co.edu.uniandes.csw.astroDevelopers.solicitud.persistence.api.ISolicitudPersistence;
import co.edu.uniandes.csw.astroDevelopers.usuario.logic.dto.UsuarioDTO;
import co.edu.uniandes.csw.astroDevelopers.usuario.persistence.api.IUsuarioPersistence;
import co.edu.uniandes.csw.astroDevelopers.equipo.logic.dto.EquipoDTO;
import co.edu.uniandes.csw.astroDevelopers.equipo.master.logic.api._IEquipoMasterLogicService;
import co.edu.uniandes.csw.astroDevelopers.equipo.master.logic.dto.EquipoMasterDTO;
import co.edu.uniandes.csw.astroDevelopers.equipo.master.persistence.api.IEquipoMasterPersistence;
import co.edu.uniandes.csw.astroDevelopers.equipo.master.persistence.entity.Equiposolicitud_proyectoEntity;
import co.edu.uniandes.csw.astroDevelopers.equipo.master.persistence.entity.Equipousuario_equipoEntity;
import co.edu.uniandes.csw.astroDevelopers.equipo.persistence.api.IEquipoPersistence;
import javax.inject.Inject;

public abstract class _EquipoMasterLogicService implements _IEquipoMasterLogicService {

    @Inject
    protected IEquipoPersistence equipoPersistance;
    @Inject
    protected IEquipoMasterPersistence equipoMasterPersistance;
    @Inject
    protected IUsuarioPersistence usuarioPersistance;
    @Inject
    protected ISolicitudPersistence solicitudPersistance;

    public EquipoMasterDTO createMasterEquipo(EquipoMasterDTO equipo) {
        EquipoDTO persistedEquipoDTO = equipoPersistance.createEquipo(equipo.getEquipoEntity());
        if (equipo.getCreatesolicitud_proyecto() != null) {
            for (SolicitudDTO solicitudDTO : equipo.getCreatesolicitud_proyecto()) {
                SolicitudDTO createdSolicitudDTO = solicitudPersistance.createSolicitud(solicitudDTO);
                Equiposolicitud_proyectoEntity equipoSolicitudEntity = new Equiposolicitud_proyectoEntity(persistedEquipoDTO.getId(), createdSolicitudDTO.getId());
                equipoMasterPersistance.createEquiposolicitud_proyectoEntity(equipoSolicitudEntity);
            }
        }
        if (equipo.getCreateusuario_equipo() != null) {
            for (UsuarioDTO usuarioDTO : equipo.getCreateusuario_equipo()) {
                UsuarioDTO createdUsuarioDTO = usuarioPersistance.createUsuario(usuarioDTO);
                Equipousuario_equipoEntity equipoUsuarioEntity = new Equipousuario_equipoEntity(persistedEquipoDTO.getId(), createdUsuarioDTO.getId());
                equipoMasterPersistance.createEquipousuario_equipoEntity(equipoUsuarioEntity);
            }
        }
        // update solicitud
        if (equipo.getUpdatesolicitud_proyecto() != null) {
            for (SolicitudDTO solicitudDTO : equipo.getUpdatesolicitud_proyecto()) {
                solicitudPersistance.updateSolicitud(solicitudDTO);
                Equiposolicitud_proyectoEntity equipoSolicitudEntity = new Equiposolicitud_proyectoEntity(persistedEquipoDTO.getId(), solicitudDTO.getId());
                equipoMasterPersistance.createEquiposolicitud_proyectoEntity(equipoSolicitudEntity);
            }
        }
        // update usuario
        if (equipo.getUpdateusuario_equipo() != null) {
            for (UsuarioDTO usuarioDTO : equipo.getUpdateusuario_equipo()) {
                usuarioPersistance.updateUsuario(usuarioDTO);
                Equipousuario_equipoEntity equipoUsuarioEntity = new Equipousuario_equipoEntity(persistedEquipoDTO.getId(), usuarioDTO.getId());
                equipoMasterPersistance.createEquipousuario_equipoEntity(equipoUsuarioEntity);
            }
        }
        return equipo;
    }

    public EquipoMasterDTO getMasterEquipo(Long id) {
        return equipoMasterPersistance.getEquipo(id);
    }

    public void deleteMasterEquipo(Long id) {
        equipoPersistance.deleteEquipo(id);
    }

    public void updateMasterEquipo(EquipoMasterDTO equipo) {
        equipoPersistance.updateEquipo(equipo.getEquipoEntity());

        //---- FOR RELATIONSHIP
        // persist new solicitud
        if (equipo.getCreatesolicitud_proyecto() != null) {
            for (SolicitudDTO solicitudDTO : equipo.getCreatesolicitud_proyecto()) {
                SolicitudDTO createdSolicitudDTO = solicitudPersistance.createSolicitud(solicitudDTO);
                Equiposolicitud_proyectoEntity equipoSolicitudEntity = new Equiposolicitud_proyectoEntity(equipo.getEquipoEntity().getId(), createdSolicitudDTO.getId());
                equipoMasterPersistance.createEquiposolicitud_proyectoEntity(equipoSolicitudEntity);
            }
        }
        // update solicitud
        if (equipo.getUpdatesolicitud_proyecto() != null) {
            for (SolicitudDTO solicitudDTO : equipo.getUpdatesolicitud_proyecto()) {
                solicitudPersistance.updateSolicitud(solicitudDTO);
            }
        }
        // delete solicitud
        if (equipo.getDeletesolicitud_proyecto() != null) {
            for (SolicitudDTO solicitudDTO : equipo.getDeletesolicitud_proyecto()) {
                equipoMasterPersistance.deleteEquiposolicitud_proyectoEntity(equipo.getEquipoEntity().getId(), solicitudDTO.getId());
                solicitudPersistance.deleteSolicitud(solicitudDTO.getId());
            }
        }
        // delete usuario
        if (equipo.getDeleteusuario_equipo() != null) {
            for (UsuarioDTO usuarioDTO : equipo.getDeleteusuario_equipo()) {
                equipoMasterPersistance.deleteEquipousuario_equipoEntity(equipo.getEquipoEntity().getId(), usuarioDTO.getId());
            }
        }
        // persist new usuario
        if (equipo.getCreateusuario_equipo() != null) {
            for (UsuarioDTO usuarioDTO : equipo.getCreateusuario_equipo()) {
                Equipousuario_equipoEntity equipoUsuarioEntity = new Equipousuario_equipoEntity(equipo.getEquipoEntity().getId(), usuarioDTO.getId());
                equipoMasterPersistance.createEquipousuario_equipoEntity(equipoUsuarioEntity);
            }
        }
        // update usuario
        if (equipo.getUpdateusuario_equipo() != null) {
            for (UsuarioDTO usuarioDTO : equipo.getUpdateusuario_equipo()) {
                equipoMasterPersistance.deleteEquipousuario_equipoEntity(equipo.getEquipoEntity().getId(), usuarioDTO.getId());
                usuarioPersistance.updateUsuario(usuarioDTO);
                Equipousuario_equipoEntity equipoUsuarioEntity = new Equipousuario_equipoEntity(equipo.getId(), usuarioDTO.getId());
                equipoMasterPersistance.createEquipousuario_equipoEntity(equipoUsuarioEntity);
                
            }
        }
    }
}
