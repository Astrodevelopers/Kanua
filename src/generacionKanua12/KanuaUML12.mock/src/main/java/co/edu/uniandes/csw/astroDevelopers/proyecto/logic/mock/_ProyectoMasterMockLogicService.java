/* ========================================================================
 * Copyright 2014 astroDevelopers
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 astroDevelopers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.astroDevelopers.proyecto.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.astroDevelopers.proyecto.logic.dto.ProyectoDTO;
import co.edu.uniandes.csw.astroDevelopers.proyecto.logic.api.IProyectoLogicService;
import co.edu.uniandes.csw.astroDevelopers.proyecto.master.logic.api._IProyectoMasterLogicService;
import co.edu.uniandes.csw.astroDevelopers.proyecto.master.logic.dto.ProyectoMasterDTO;
import co.edu.uniandes.csw.astroDevelopers.tag.logic.api.ITagLogicService;
import co.edu.uniandes.csw.astroDevelopers.objetivo.logic.api.IObjetivoLogicService;
import co.edu.uniandes.csw.astroDevelopers.tag.logic.dto.TagDTO;
import co.edu.uniandes.csw.astroDevelopers.objetivo.logic.dto.ObjetivoDTO;
import javax.inject.Inject;


public abstract class _ProyectoMasterMockLogicService implements _IProyectoMasterLogicService {

    protected static ArrayList<ProyectoMasterDTO> proyectoMasterDtosList = new ArrayList<ProyectoMasterDTO>() ;
    @Inject
    protected ITagLogicService tagPersistance;
    @Inject
    protected IObjetivoLogicService objetivoPersistance;
    @Inject
    protected IProyectoLogicService proyectoPersistance;

    public ProyectoMasterDTO createMasterProyecto(ProyectoMasterDTO proyecto) {

        proyectoPersistance.createProyecto(proyecto.getProyectoEntity());
        for (TagDTO dto : proyecto.getCreatetag_proyecto()) {
            tagPersistance.createTag(dto);
        }
        for (ObjetivoDTO dto : proyecto.getCreateobjetivo_proyecto()) {
            objetivoPersistance.createObjetivo(dto);
        }
        proyectoMasterDtosList.add(proyecto);
        return proyecto;
    }

    public ProyectoMasterDTO getMasterProyecto(Long id) {
        for (ProyectoMasterDTO proyectoMasterDTO : proyectoMasterDtosList) {
            if (proyectoMasterDTO.getProyectoEntity().getId() == id) {
                return proyectoMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterProyecto(Long id) {
        for (ProyectoMasterDTO proyectoMasterDTO : proyectoMasterDtosList) {
            if (proyectoMasterDTO.getProyectoEntity().getId() == id) {

                for (TagDTO dto : proyectoMasterDTO.getCreatetag_proyecto()) {
                    tagPersistance.deleteTag(dto.getId());
                }
                proyectoPersistance.deleteProyecto(proyectoMasterDTO.getId());
                proyectoMasterDtosList.remove(proyectoMasterDTO);
                for (ObjetivoDTO dto : proyectoMasterDTO.getCreateobjetivo_proyecto()) {
                    objetivoPersistance.deleteObjetivo(dto.getId());
                }
                proyectoPersistance.deleteProyecto(proyectoMasterDTO.getId());
                proyectoMasterDtosList.remove(proyectoMasterDTO);
            }
        }

    }

    public void updateMasterProyecto(ProyectoMasterDTO proyecto) {

        // update Tag
        if (proyecto.getUpdatetag_proyecto() != null) {
            for (TagDTO dto : proyecto.getUpdatetag_proyecto()) {
                tagPersistance.updateTag(dto);
            }
        }
        // persist new Tag
        if (proyecto.getCreatetag_proyecto() != null) {
            for (TagDTO dto : proyecto.getCreatetag_proyecto()) {
                TagDTO persistedTagDTO = tagPersistance.createTag(dto);
                dto = persistedTagDTO;
            }
        }
        // delete Tag
        if (proyecto.getDeletetag_proyecto() != null) {
            for (TagDTO dto : proyecto.getDeletetag_proyecto()) {

                tagPersistance.deleteTag(dto.getId());
            }
        }
        // update Objetivo
        if (proyecto.getUpdateobjetivo_proyecto() != null) {
            for (ObjetivoDTO dto : proyecto.getUpdateobjetivo_proyecto()) {
                objetivoPersistance.updateObjetivo(dto);
            }
        }
        // persist new Objetivo
        if (proyecto.getCreateobjetivo_proyecto() != null) {
            for (ObjetivoDTO dto : proyecto.getCreateobjetivo_proyecto()) {
                ObjetivoDTO persistedObjetivoDTO = objetivoPersistance.createObjetivo(dto);
                dto = persistedObjetivoDTO;
            }
        }
        // delete Objetivo
        if (proyecto.getDeleteobjetivo_proyecto() != null) {
            for (ObjetivoDTO dto : proyecto.getDeleteobjetivo_proyecto()) {

                objetivoPersistance.deleteObjetivo(dto.getId());
            }
        }
    }
}